FORMAT: 1A
HOST: http://docs.look.apiary.io/



# LOOK



<style>
table th { background-color: #999999; }

tr.section-header { background-color: #C0C0C0; }

.code { font-family: monospace; }

.dev-comment {
    #display: none;
    margin: 1em 0;
    border: 0.2em solid orange;
    padding: 1em;
    background-color: beige;
}
.dev-comment::before {
    content: "Developer comment";
    font-weight: bold;
    color: darkorange;
}
.dev-comment > pre { text-shadow: none; }

.tmp-note { color: red }
</style>



The API works over the HTTP 1.1 protocol. It exposes a set of resources, which can be used to retrieve and/or modify 
application state. States of resources are represented in JSON. Operations are specified by HTTP request methods, their 
parameters – by URI query string. Response codes are (subset of) those defined by the HTTP standard. The API is stateless.

The application consists of three major parts: **_core_**, **_engine_** and **_data service_**. 
Each part exposes its own resources.

The **_core_** is always running and performs general maintenance functions.

The **_engine_** is the main functional component. It retrieves data from input device, performs tracking and 
classification of faces and bodies, and provides data for data service to collect. It can be started and stopped via 
state resource.

The **_data service_** is responsible for collecting recognition data to and retrieving it from DB. It can be considered 
part of **_engine_**, but is able to run separately. When data service runs as part of engine, it works in 
**_active mode_** (collects data) and has a **_current session_**. If it runs separately, it is in **_passive mode_**
and have no current session (can only retrieve data from previous sessions).

# Resources exposed by core
<table>
    <tr> 
        <th bgcolor="#999999">Name</th>
        <th bgcolor="#999999">Function</th>
    </tr>
    <tr> <td>/log</td> <td> Get log messages. </td> </tr>
    <tr> <td>/network</td> <td> Network configuration. </td> </tr>
    <tr> <td>/input_devices</td> <td> Input devices configuration. </td> </tr>
    <tr> <td>/config</td> <td> Get / set configuration of apllication and system. </td> </tr>
    <tr> <td>/state</td> <td> Get state of engine and data service, and set it (i.e. start / stop the component). </td> </tr>
    <tr> <td>/command</td> <td> Reload application data (license, plugins and settings). </td> </tr>
    <tr> <td>/system</td> <td> Reboot or shut down the system. </td> </tr>
    <tr> <td>/license</td> <td> Get list of licensed modules. </td> </tr>
</table>

# Resources exposed by data service
<table>
    <tr> 
        <th bgcolor="#999999">Name</th> 
        <th bgcolor="#999999">Function</th> 
    </tr>
    <tr> <td>/data</td> <td> Get recognition data. </td> </tr>
</table>

# Resources exposed by engine
<table>
    <tr> 
        <th bgcolor="#999999">Name</th> 
        <th bgcolor="#999999">Function</th> 
    </tr>
    <tr> <td>/video</td> <td> Get video stream with recognition visualization marks. </td> </tr>
    <tr> <td>/snapshots</td> <td> Save snapshot image of input video stream. </td> </tr>
    <tr> <td>/notification_service</td> <td> Event notification. </td> </tr>
</table>

# Resources exposed by engine and data service
<table>
 <tr>
 <th bgcolor="#999999">Name</th>
 <th bgcolor="#999999">Function</th>
 </tr>
 <tr> <td>/process_image</td> <td> Get object attributes from static image. </td> </tr>
</table>

# Request
The Request-URI have form

    /resource_id [ ?query_string ] 
     
where expression in square brackets is optional.

The *query_string* can have two forms:  
1. series of pairs parameter=value, connected with the “&” character;  
2. single value without parameter name.  
Second form is used when operation has single parameter.

Request must contain header field _Host_ required by HTTP 1.1:  
Host: *host:port*  
where  
*host* - host domain name specified by configuration parameter $.system.web.domain or IP address;  
*port* - pre-configured port number.

If a request has body, it must include header fields Content-Type with value _application/json_ and _Content-Length_.

# Response
The possible HTTP status values are listed in the following table.
<table>
    <tr> 
        <th bgcolor="#999999">Status</th> 
        <th bgcolor="#999999">Reason</th> 
    </tr>
    <tr> <td>200 OK</td> <td>Operation completed successfully.</td> </tr>
    <tr> <td>201 Created</td> <td>Resource created.</td> </tr>
    <tr> <td>400 Bad Request</td> <td>The request has incorrect syntax or structure.</td> </tr>
    <tr> <td>401 Unauthorized</td> <td>The request requires user authentication.</td> </tr>
    <tr> <td>404 Not Found</td> 
        <td>Resource specified in Request-URI is not found. Possible causes are incorrect resource identifier;
            resource is provided by the engine or data service which is not running.
    </td> </tr>
    <tr> <td>500 Internal Server Error</td> <td>Internal application error.</td> </tr>
    <tr> <td>503 Service Unavailable</td> 
        <td>Operation could not be performed because application is in process of transition to another state 
            (for example, engine is starting).
    </td> </tr>
</table>

If response has body, it contains header fields _Content-Length_ and _Content-Type_.  
If body is text message, value of _Content-Type_ is **text/plain; charset=UTF-8**,
if body is JSON - **application/json; charset=UTF-8**.


# Authentication

Requests from localhost or with GET method do not require authentication. 
All other requests require authentication using Basic scheme, as described in RFC 2617. 
The authentication parameter realm has value Look.


# Data types

This document uses two conventional data types.
<table>
    <tr>
        <tr> 
            <th bgcolor="#555555">Type</th> 
            <th bgcolor="#555555">Description</th> 
        </tr>
        
        <tr><td>ApiTimeMs</td>
            <td>Number of milliseconds since 1970-01-01 00:00:00 UTC.<td/></tr>
    </tr>
</table>


# Remote access

Remote access can be done by several ways.

## Local access http://localhost:8081

With this method you have full access to any http resource and method, for example:

- curl -X GET http://localhost:8081/state
- curl -X PUT http://localhost:8081/state

## HTTPS access with autenthication https://< remote_ip >:8182

In this case you can use only GET HTTP method and any resource without autenthication, all
other only with autenthication, for example:

- curl -X GET https://< remote_ip >:8182/state
- curl -u user:password -X PUT https://< remote_ip >:8182/state

where < remote_ip > is IP of "Look" host.










# Group Log

The log resource gives access to the current session log, which contains informational and error messages.

    JSON data  
        { "events": [ event-list ] },  
    where  
        event:  
        {  
          "type": "type",  
          "priority": "priority",  
          "domain": "domain",  
          "msg": "message"  
        }  

Event fields:

<table>
    <tr> 
        <th bgcolor="#999999">Field</th>
        <th bgcolor="#999999">Type</th>
        <th bgcolor="#999999">Description</th>
    </tr>
    <tr> <td>type</td> <td>String</td> <td>Event type. There are several types, but only type “Msg” (message event) is documented. Others depend on implementation. The client should count all events for purpose of index calculation, but output only message events.</td> </tr>
    <tr> <td>priority</td> <td>String</td> <td>Event priority. Possible values in order of increasing priority: info, notice, warning, error, critical, alert, emergency. The last three are very rare in practice. Also undocumented values can exist.</td> </tr>
    <tr> <td>domain</td> <td>String</td> <td>Name of the application subsystem (e.g. module) that produced the event.</td> </tr>
    <tr> <td>msg</td> <td>String</td> <td>Message text. It is pre-formatted with spaces and new line characters (\n).</td> </tr>
</table>

_Also undocumented fields can exist._

## GET /log{?begin_idx,end_idx}

+ Parameters
 + begin_idx = `0` (optional, number)
  0-based index of the first event to return. If absent, assumed = 0.
 + end_idx = `0` (optional, number)
  0-based index of one past the last event to return. If absent, return events up to last one.

+ Response 200 (application/json)
 + Body
 
            { 
                "events": [ 
                    { 
                        "domain": "", 
                        "msg": "Look daemon is starting...", 
                        "priority": "info", 
                        "type": "Msg"
                    }
                ]
            }


            







# Group Network

Resources is this group allow to get and set network configuration.

The appliance is shipped with pre-defined set of available network interfaces. This set cannot be changed by user. 
The user can change configuration of each interface and select which one the API should operate on (the **active interface**).

Resources in this group use object NetworkInterface, which has following structure

    NetworkInterface:
        {
            id:
            is_wlan:
    
            ssid:
            security_method:
            wpa_passphrase:
            
            config_method_dhcp:
            address:
            netmask:
            gateway:
            dns_nameservers: [ dns_nameserver-list ]
        }
        
where


<table>
    <tr> 
        <th bgcolor="#999999">Name</th>
        <th bgcolor="#999999">Type</th>
        <th bgcolor="#999999">Description</th>
        
        
        <tr> <td>id</td> <td>String</td> <td>Interface ID. Examples: eth1, wlan0</td> </tr>
        <tr> <td>is_wlan</td> <td>Boolean</td> <td>If interface is wireless.</td> </tr>
        
        <tr> <td colspan="3" bgcolor="#999999">WLAN parameters</td> </tr>
        
        <tr> <td>ssid</td> <td>String</td> <td>SSID of WLAN to connect to. Present only if is_wlan is true.</td> </tr>
        <tr> <td>security_method</td> 
            <td>String</td> 
            <td>
                Security method to use in WLAN. Valid values are <br />
                <<empty/>empty> - use none <br />
                wep – currently not supported <br />
                wpa – currently not supported <br />
                wpa2 <br />
                Present only if is_wlan is true.
            </td> 
        </tr>
        <tr> <td>wpa_passphrase</td> 
            <td>String</td> 
            <td>
                WPA passphrase. <br />
                Present only if security method is WPA or WPA2.
            </td> 
        </tr>
        
        <tr> <td colspan="3" bgcolor="#999999">High-level parameters</td> </tr>
        
        <tr> <td>config_method_dhcp</td> <td>Boolean</td> <td>If configuration method is by DHCP.</td> </tr>
        <tr> <td>address</td> <td>ipv4</td> <td>Address.</td> </tr>
        <tr> <td>netmask</td> <td>ipv4</td> <td>Netmask.</td> </tr>
        <tr> <td>gateway</td> <td>ipv4</td> <td>Default gateway. May be empty.</td> </tr>
        <tr> <td>dns_nameserver</td> <td>ipv4</td> <td>Address of DNS name server.</td> </tr>
    </tr>
</table>

When  NetworkInterface object is retrieved from server, the following rules apply.

 - Field wpa_passphrase is absent. - Not true currently and questionable generally.
 - If configuration method is DHCP, high-level parameters (except config_method) specify values assigned by DHCP. 
   A parameter can be absent if its value currently cannot be determined (probably because interface is down).

## Network Interfaces [/network/interfaces]

This resource represents the collection of system's network interfaces and allows to get their configuration.

### Get configuration of network interfaces [GET]

####Response

    JSON data
    [ NetworkInterface-list ]

+ Response 200 (application/json)
 + Body
 
             [ 
                { 
                    "address": "192.168.0.62", 
                    "config_method_dhcp": true, 
                    "dns_nameservers": [ 
                        "192.168.0.5", 
                        "8.8.8.8" 
                    ], 
                    "gateway": "192.168.0.5", 
                    "id": "eth0", 
                    "is_wlan": false, 
                    "netmask": "255.255.255.0" 
                }, 
                { 
                    "address": "192.168.0.112", 
                    "config_method_dhcp": true, 
                    "dns_nameservers": [ 
                        "192.168.0.5", 
                        "8.8.8.8" 
                    ], 
                    "id": "wlan0", 
                    "is_wlan": true, 
                    "netmask": "255.255.255.0", 
                    "security_method": "wpa2", 
                    "ssid": "...", 
                    "wpa_passphrase": "..." 
                } 
            ]


## Network interface [/network/interfaces/{id}]

This resource represents network interface with ID id.

+ Parameters

 + id (required, string, `eth0`)
  The `id` is one the IDs retrieved in GET /network/interfaces request.

### Get [GET]

+ Response 200 (application/json)
 + Body
 
            { 
                "address": "192.168.0.62", 
                "config_method_dhcp": true, 
                "dns_nameservers": [ 
                    "192.168.0.5", 
                    "8.8.8.8" 
                ], 
                "gateway": "192.168.0.5", 
                "id": "eth0", 
                "is_wlan": false, 
                "netmask": "255.255.255.0" 
            }


### Put [PUT]

Set network interface configuration.

#### Request

    JSON data
    NetworkInterface

Fields that do not change may be absent.

Fields id, type are ignored and may be absent.

If after applying specified settings security method should be WPA or WPA2, the field wpa_passphrase is ignored and 
may be absent. (This behavior might change.)


#### Response

If the client operates from remote host, and changed interface is the active one, and the call is successful, 
the connection is closed and the client receives no response. After that it can connect again, possibly using 
new address if it has changed.

If id does not correspond to any interface, the response status is 404 Not Found.

If DHCP network configuration is activated and there is no DHCP server available, the response status is 409 Conflict 
and the body contains reason text.

+ Request (application/json)

 + Body
 
            { 
                "config_method_dhcp": false,
                "address": "192.168.0.62",
                "netmask": "255.255.255.0",
                "gateway": "192.168.0.5",
                "dns_nameservers": [ "192.168.0.5", "8.8.8.8" ]
            }

+ Response 200


## SSID`s network interface [/network/interfaces/{id}/ssids]

This resource represents the set of SSIDs of networks currently available via WLAN network interface with ID id. 

### Get available SSIDs [GET]

#### Response

    JSON data
    [ ssid-list ]
    
where _ssid_ is a String.

If _id_ does not correspond to WLAN interface, response status is 404 Not Found.


+ Response 200 (application/json)

 + Body
 
            [
                "123",
                "234"
            ]



## Active Network Interface ID configuration [/network/active_interface_id]

This resource holds the ID of active network interface.

### Get active network interface ID [GET]

#### Response

    JSON data
    { "id": id }
    
where _id_ is a String specifying the interface ID.

+ Response 200 (application/json)

 + Body
 
             { 
                "id": "eth0" 
            }

### Put [PUT]

#### Request

    JSON data
    { "id": id }
    
where _id_ is a String specifying the interface ID.


#### Response

If the client operates from remote host and the call is successful, the connection is closed and the client receives no 
response. After that it can connect again, using new active interface address.

If specified ID does not correspond to any interface, the response status is 400 Bad Request.

+ Request (application/json)

 + Body
 
            {
                "id": "wlan0"
            }

+ Response 200










# Group Input Devices


Resources is this group allow to configure input devices.

Input devices are distinguished by type. Look supports cameras and natural interaction (NI) devices (Kinect / Xtion).

A device can be connected to the system locally (via USB for example) or be available via network. They are called 
**local device** and **network device** respectively. Local devices are read-only in API; the client can only select 
one of them as active. Network devices can be added, updated and deleted by the client.
Currently only cameras can be network devices.

More than one device of same type can be available. For example, one could have second camera that is differently placed, 
or used for something beside Look. Each device has the **location**.

To distinguish similar local devices user needs to establish an (informal) agreement about which device is plugged to 
which port. For example, always plug “top” camera to left USB port on motherboard's back, and “bottom” camera to 
right USB port. Then in API a **system location** (data identifying a port) of a device can be used as a reflection of 
its physical placement / purpose / other distinctive property. For local devices the location is its system location.

For network devices the location is an URL.

The active input device is identified by both its type and location. If a device of configured type is not found at 
configured location, the engine will not start.

**Note**: currently only one connected (local) NI device is supported. Its location is empty.

If local device configured as active is unplugged, it still is included in device list, with field plugged set to false. After activation of other (plugged) device, unplugged device is discarded.

Any action changing active input device location (including device switching) is not allowed while engine is running (application is in live mode). The response status in such case is 409 Conflict with corresponding text message. The client must stop the engine, perform configuration changes and start the engine again.

Resources in this group use following data types.
Data type DeviceId represents input device ID. It is an unsigned integer number.

Data type Device represents an input device. It is an object with the following structure

    Device:
        {
            id:
            type:
            connection:
            location:
            name: 
            plugged:
        }
    
where

<table>
    <tr> 
        <th bgcolor="#999999">Field</th>
        <th bgcolor="#999999">Type</th>
        <th bgcolor="#999999">Description</th>
        
        
        <tr> <td>id</td> <td>DeviceId</td> <td><Device ID, assigned by the server./td> </tr>
        <tr> <td>type</td> <td>String</td> <td>Device type. Possible values are Camera or NIDevice (natural interaction device).</td> </tr>
        <tr> <td>connection</td> <td>String</td> <td>Device connection type. Possible values are local and network.</td> </tr>
        <tr> 
            <td>location</td> 
            <td>String</td> 
            <td>
                Device location. <br />
                For local devices this is system location, for example usb-0000:00:1a.0-1.3. <br />
                For network devices this is URL. <br />
            </td> 
        </tr>
        <tr> 
            <td>name</td> 
            <td>String</td> 
            <td>
                Device name. <br />
                For local devices it is read-only. It is empty (cannot be determined) if device is unplugged. 
                Example: Microsoft® LifeCam HD-5000. <br />
                For network devices the name must be set by the client. <br />
            </td> 
        </tr>
        <tr> 
            <td>plugged</td> 
            <td>Boolean</td> 
            <td>
                Indicates if local device is currently plugged. This field is absent for network devices. <br />
                There is only one case when this field is false – if active local device is unplugged.
            </td> 
        </tr>
</table>

## Input Devices [/input_devices/devices]

This resource represents all input devices known to the system.

### Get all devices [GET]

#### Response

    JSON data
    [ Device-list ]

+ Response 200 (application/json)

 + Body
 
            [ 
                { 
                    "connection": "local", 
                    "id": 1, 
                    "location": "usb-0000:00:1d.0-1.6", 
                    "name": "A4 TECH USB2.0 PC Camera J", 
                    "plugged": true, 
                    "type": "Camera" 
                }, 
                { 
                    "connection": "network", 
                    "id": 2, 
                    "location": "rtsp://user:pass@fisheye:8554/CH001.sdp?tcp", 
                    "name": "FishEye", 
                    "type": "Camera" 
                } 
            ]

### Add network input device - camera [POST]

#### Request

    JSON data
    Device
    
Only fields location and name are required, the rest is ignored.

#### Response

    JSON data
    Identifier (DeviceId) assigned to device by the server.

+ Request (application/json)

 + Body
 
            { 
                "location": "rtsp://user:pass@fisheye:8554/CH001.sdp?tcp", 
                "name": "FishEye"
            }

+ Response 201 (application/json)
 + Header
 
            Location : http://root/input_devices/devices/2

 + Body
 
            2

## Network Input Devices [/input_devices/devices/network]

This resource represents network input devices (cameras).

### Get network input devices - cameras [GET]

#### Response

    JSON data
    [ Device-list ]

+ Response 200 (application/json)

 + Body
 
            [ 
                { 
                    "connection": "network", 
                    "id": 2, 
                    "location": "rtsp://user:pass@fisheye:8554/CH001.sdp?tcp", 
                    "name": "FishEye", 
                    "type": "Camera" 
                } 
            ]

### Add network input device - camera [POST]

#### Request

    JSON data
    Device
    
Only fields location and name are required, the rest is ignored.

#### Response

    JSON data
    Identifier (DeviceId) assigned to device by the server.
    
+ Request (application/json)

 + Body
 
            { 
                "location": "rtsp://user:pass@fisheye:8554/CH001.sdp?tcp", 
                "name": "FishEye"
            }

+ Response 201 (application/json)
 + Header
 
            Location : http://root/input_devices/devices/2

 + Body
 
            2

### Delete all network input devices - cameras [DELETE]

#### Response

If active input device is network device and engine is running (application is in live mode), 
response status is 409 Conflict.

+ Response 200

## Input Device [/input_devices/devices/{id}]

This resource represents input device.

+ Parameters
    + id (required, number, `1`) 
     The `id` is one of the IDs retrieved in GET /input_devices/devices request.

### Get input device [GET]

#### Response

    JSON data
    Device

+ Response 200 (application/json)

 + Body
 
            { 
                "connection": "local", 
                "id": 1, 
                "location": "usb-0000:00:1d.0-1.6", 
                "name": "A4 TECH USB2.0 PC Camera J", 
                "plugged": true, 
                "type": "Camera" 
            }

### Update network input device - camera [PUT]

#### Request

    JSON data
    Device
    
Only fields location and name are required, the rest is ignored.

#### Response

If id does not correspond to any device, the response status is 404 Not Found.

If id identifies local device, the response status is 405 Method Not Allowed.

If id identifies active input device, field location is being updated and engine is running 
(application is in live mode), response status is 409 Conflict.

+ Request (application/json)

 + Body
 
            { 
                "location": "rtsp://user:pass@fisheye:8554/CH001.sdp?tcp", 
                "name": "FishEye"
            }

+ Response 200

### Delete network input device - camera [DELETE]

#### Response

If id does not correspond to any device, the response status is 404 Not Found.

If id identifies local device, the response status is 405 Method Not Allowed.

If id identifies active input device and engine is running (application is in live mode), response status is 409 Conflict.

+ Response 200

## Active Input Device [/input_devices/active_id]

This resource represents active input device ID

### Get active device ID [GET]

#### Response

    JSON data
    Identifier (DeviceId) of active device or null if active device is not set.

+ Response 200 (application/json)

 + Body
 
            1

## Active Input Device [/input_devices/active_id?{id}]

### Set active input device ID [PUT]

#### Response

If engine is running (application is in live mode), response status is 409 Conflict.

If id does not correspond to any device, the response status is 400 Bad Request.

+ Parameters
    + id (required, number, `1`) 
     The `id` is one of the IDs retrieved in GET /input_devices/devices request.

+ Response 200


## Input Devices and Active Input Device [/input_devices]

This is a composite resource combining resources /input_devices/devices and /input_devices/active_id.

### Get all input devices and active device ID [GET]

#### Response

    JSON data
    {
        "devices": [ Device-list ],
        "active_id": active_id
    }
    
See /input_devices/devices and /input_devices/active_id for details.

+ Response 200 (application/json)

 + Body
 
            { 
                "active_id": 2, 
                "devices": [ 
                    { 
                        "connection": "local", 
                        "id": 1, 
                        "location": "usb-0000:00:1d.0-1.6", 
                        "name": "A4 TECH USB2.0 PC Camera J", 
                        "plugged": true, 
                        "type": "Camera" 
                    }, 
                    { 
                        "connection": "network", 
                        "id": 2, 
                        "location": "rtsp://user:pass@fisheye:8554/CH001.sdp?tcp", 
                        "name": "FishEye", 
                        "type": "Camera" 
                    } 
                ] 
            }










# Group Config

This resource allows to get and set configuration.

Configuration settings logically fall into two categories: **communication settings** and **engine settings**. 
The **communication settings** include domain, password etc. The **engine settings** apply to main application functionality.

    JSON data
    {
        "modules": [ module-list ]
        "system": {
            "web": [ parameter-list ],
            "authorization": [ parameter-list ]
        }
    }

The _module-list_ contains the list of application modules with their parameters.

    module:
        {
            "name": {
                "description": "description",
                "parameters": [ parameter-list ]
            }
        }

where

<table>
    <th bgcolor="#999999">Field</th>
    <th bgcolor="#999999">Type</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>name</td> <td>String</td> <td>Module name.</td> </tr>
    <tr> <td>description</td> <td>String</td> <td>Module description.</td> </tr>
</table>

Each _parameter_ in parameter-list has the following structure:

    parameter:
        {
            "name": "name",
            "display_name": "display_name",
            "description": "description",
            "type": "type",
            "requires_restart": requires_restart,
            "value": value
        }
        
where

<table>
    <th bgcolor="#999999">Field</th>
    <th bgcolor="#999999">Type</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>name</td> <td>String</td> <td>Internal parameter name. It is the same as in configuration file.</td> </tr>
    <tr> <td>display_name</td> <td>String</td> <td>Parameter name to display.</td> </tr>
    <tr> <td>description</td> <td>String</td> <td>Parameter description. Can be empty.</td> </tr>
    
    <tr> <td>type</td> <td>String</td> 
         <td>
            <table>
                <th bgcolor="#999999">Parameter type</th>
                <th bgcolor="#999999">Possible values are</th>
                <tr> <td>int</td> <td>Integer number.</td> </tr>
                <tr> <td>real</td> <td>Real number.</td> </tr>
                <tr> <td>bool</td> <td>Boolean.</td> </tr>
                <tr> <td>string</td> <td>String.</td> </tr>
                <tr> <td>ipv4</td> <td>IPv4 address (dotted quad).</td> </tr>
                <tr> <td>map</td> <td>Map. The value of this type is an object. Only object values can be changed. Keys cannot be removed or inserted.</td> </tr>
            </table>
         </td> 
    </tr>
    
    <tr> <td>requires_restart</td> <td>Boolean</td> 
         <td>Specifies if changing value of this parameter requires engine restart.
             This field can be absent in parameters that do not belong to modules (e.g. network configuration parameters).
         </td> 
    </tr>
    <tr> <td>value</td> <td>Depends on type</td> <td>Parameter value.</td> </tr>
</table>

**Also unspecified fields can exist.**

The _web_ key contains parameters specifying high-level communication options:

<table>
    <th bgcolor="#999999">Name</th>
    <th bgcolor="#999999">Type</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>domain</td> <td>String</td> <td>Fully qualified domain name of application host. This domain name must be specified in header field Host of API requests.</td> </tr>
    <tr> <td>ssl_enabled</td> <td>Bool</td> <td>Specifies if SSL/TLS encryption is enabled.</td> </tr>
</table>

The _authorization_ key contains authorization parameters. Authorization is required for un-safe request methods (PUT). The parameters are:

<table>
    <th bgcolor="#999999">Name</th>
    <th bgcolor="#999999">Type</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>password</td> <td>String</td> <td>Password.</td> </tr>
</table>

The value is empty string – it is write-only.

The key _"modules"_ belong to engine settings, _"system"_ – to communication settings.


LOOK has the following specific module parameters (in addition to platform):

<table>
         <th>Name</th>      
         <th>Type</th>
         <th>Description</th>
         <th>Requires restart</th>
    
    
    <tr class="section-header"><td colspan="4">VideoObjectsTracker module</td></tr>
    <tr><td class="code">camera_angle_of_view</td> <td>real</td>
        <td>Camera's vertical angle of view, degrees.</td>
        <td>yes</td>
    </tr>
    
    
    <tr class="section-header"><td colspan="4">DataService module</td></tr>
    <tr><td class="code">update_interval</td> <td>real</td>
        <td><p>Interval between data snapshots, seconds.</p>
            <p>A snapshot consists of records of all classification attributes for all current objects.
            </p>
            <p>When object enters or exits, the snapshot is stored regardless of interval and timer
               restarts from that moment. When object exits, the snapshot for previous frame (last
               frame object was seen on) is also saved.</p>
            <p>If value is -1, timer is off and snapshots are made only on enter/exit.</p>
        </td>
        <td>yes</td>
    </tr>
    <tr><td class="code">face_duration_threshold</td> <td>int</td>
        <td>Duration of continuous period after which face is considered inactive, minutes. 
            This parameter does not have effect</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">age_confidence_threshold</td> <td>real</td>
        <td>If age confidence is lower than this threshold, age is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">gender_confidence_threshold</td> <td>real</td>
        <td>If gender or primary_gender confidence confidence is lower than this threshold, 
            gender or primary_gender confidence is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">race_confidence_threshold</td> <td>real</td>
        <td>If race confidence is lower than this threshold, race is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">emotion_confidence_threshold</td> <td>real</td>
        <td>If emotion confidence is lower than this threshold, emotion is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">age_group_confidence_threshold</td> <td>real</td>
        <td>If age confidence for time request is lower than this threshold, age for time request is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">gender_group_confidence_threshold</td> <td>real</td>
        <td>If majority_gender confidence or gender confidence for time request is 
            lower than this threshold, majority_gender or gender for time request is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">race_group_confidence_threshold</td> <td>real</td>
        <td>If race confidence for time request is lower than this threshold, race for time request is undefined.</td>
        <td>yes</td>
    </tr>
    <tr><td class="code">emotion_group_confidence_threshold</td> <td>real</td>
        <td>If principal_emotion confidence or majority_emotion confidence or emotion confidence for time request is
            lower than this threshold, principal_emotion or majority_emotion or emotion for time request is undefined.</td>
        <td>yes</td>
    </tr>
    
    
    <tr class="section-header"><td colspan="4">ImageProcessor module</td></tr>
    <tr><td class="code">gender_confidence_threshold</td> <td>real</td>
        <td>If gender confidence is lower than this threshold, gender is undefined.</td>
        <td>yes</td>
    </tr>
    
    <tr class="section-header"><td colspan="4">Visualizer module</td></tr>
    <tr><td class="code">hide_all</td> <td>bool</td>
        <td>Turn off all visualization.</td>
        <td>no</td>
    </tr>
    <tr><td class="code"><p>show_gender</p>
                         <p>show_gender_confidence</p>
                         <p>show_age</p>
                         <p>show_age_confidence</p>
                         <p>show_race</p>
                         <p>show_race_confidence</p>
                         <p>show_emotion</p>
                         <p>show_emotion_confidence</p>
                         <p>show_distance</p>
        </td>
        <td>bool</td>
        <td>Visualize corresponding object attribute.</td>
        <td>no</td>
    </tr>
    <tr><td class="code">show_age_mode</td> <td>string</td>
        <td><p>Age visualization mode: <code>value</code> - single value; <code>group</code> - name
               of range; <code>range</code> - numeric range.</p></td>
        <td>no</td>
    </tr>
    <tr><td class="code">show_race_mode</td> <td>string</td>
        <td><p>Race visualization mode: <code>color</code> - colored rectangle where the color means race:
        white-White, black-Black, yellow-Asian, orange-Latino, red-Mid-East; <code>name</code> - just the name
               of the race as a string. (Look >= 2.0a9)</p></td>
        <td>no</td>
    </tr>
    <tr><td class="code">show_main_person</td> <td>bool</td>
        <td>Show main person.</td>
        <td>no</td>
    </tr>
    <tr><td class="code">not_detected_timeout</td> <td>real</td>
        <td>Timeout for hiding not detected objects, sec.</td>
        <td>no</td>
    </tr>
    <tr><td class="code">debug_output</td> <td>bool</td>
        <td>Show debug output.</td>
        <td>no</td>
    </tr>
</table>


<br/>
<br/>


## Current configuration [/config]

### Get current configuration [GET]

+ Response 200 (application/json)
 + Body
 
            { 
                "modules": { 
                    "VisualSnapshotSaver": { 
                        "description": "Creates snapshots (images) of input video stream.", 
                        "parameters": [ 
                            { 
                                "description": "", 
                                "display_name": "JPEG compression quality", 
                                "internal": false, 
                                "name": "quality", 
                                "requires_restart": false, 
                                "type": "int", 
                                "value": 70, 
                                "virtual": false 
                            }
                        ] 
                    }
                }, 
                "system": { 
                    "authorization": [ ], 
                    "web": [ ] 
                } 
            } 

### Set configuration [PUT]

#Request

The structure of data is the same as describe above, but certain parts may be absent.

Any of the first-level keys (modules, system) may be absent.

Some or all modules in _module-list_ may be absent. Each module must have the following minimal structure:

    module:
        {
            "name": {
                "parameters": [ parameter-list ]
            }
        }

For modules, some or all parameters in each parameter-list may be absent.

Each _parameter_ must have the following minimal structure:

    parameter:
        {
            "name": "name",
            "value": value,
        }

Any of the keys in _"system"_ (_web_, _authorization_) may be absent.

It is forbidden to change communication settings together with engine settings in one API call. 
The reason is that changing communication settings involves closing of network connection.

# Response

Certain engine settings require restart of engine and/or data service in order to apply them. 
If the component is running and have to restart, response has body with JSON

    { "restart": true }
    
Restart is performed automatically. Changing input device always requires restart of engine.

If restart is not needed, OK response has no body.

If communication settings are changes successfully, connection is closed and the client receives no response.

+ Request (application/json)
 + Body
    
            { 
                "modules": { 
                    "VisualSnapshotSaver": { 
                        "parameters": [ 
                                "name": "quality", 
                                "value": 85, 
                            } ,
                        ] 
                    } 
                }, 
                "system": { 
                    "authorization": [ ], 
                    "web": [ ] 
                } 
            }

+ Response 200










# Group State

This resource allows to get and set application state. The application state consists of engine state and data service state.

There are four states for **engine** and **data service**: _stopped_, _starting_, _running_, _stopping_.

If the **engine** is _starting_, _running_ or _stopping_, **data service** is doing the same (because it is part of engine). 
If **engine** is _stopped_, **data service** can be in any state.

    JSON data
    {
        "engine": "state",
        "data_service": "state"
    }
    
where _state_ is one of:

 - stopped
 - starting
 - running
 - stopping

## Current state [/state]

### Get current application state [GET]

+ Response 200 (application/json)
 + Body
 
            { 
                "data_service": "stopped", 
                "engine": "stopped" 
            }

### Set application state, i. e. start or stop engine and/or data service [PUT]

# Request

Starting and stopping engine can take several seconds, so the requests must have appropriate timeout.

Request JSON data structure is the same as described above, where **state** is _running_ to start and _stopped_ to stop 
**engine** or **data service**.
The combination of running engine and stopped data service is invalid.

# Response

If the application is already in requested state, response with status 200 OK is returned immediately.

If the engine or data service is in state transitional to requested, request is handled as if it was in state opposite 
to requested. For instance, if engine is starting and request with started is made, this request is handled as if 
engine was stopped, i.e. set to wait until operation is completed.

If the engine or data service is starting and stop is requested, or it is stopping and start is requested, 
response status is 503 Service Unavailable and body is as if GET /state request was made.

If request is to start engine and stop data service, response status is 400 Bad Request.

+ Request (application/json)
 + Body
 
            { 
                "data_service": "running", 
                "engine": "running" 
            }

+ Response 200










# Group Command

This resource allows to send command to reload application data (license, plug-ins (modules) and settings). 
The core with HTTP server is not restarted.

## Send command [/command?{reload}]

+ Parameters
    + reload (required, string)
    
        Reload application data. Has no value.

        + Values
            + `reload`


### Execute application command [PUT]

# Response

Response has no data.

If **engine** or **data service** is not _stopped_, response status is 503 Service Unavailable.

+ Response 200










# Group System
This resource allows to reboot or shut down the system.

## System command [/system?{command}]

+ Parameters
    + command (required, string)
    
        Reboot or shut down the system

        + Values
            + `reboot`
            + `shut_down`

### Execute system command [PUT]

# Request

If the **engine** or **data service** is _running_, it is stopped before executing command. 
This can take several seconds, so the request must have appropriate timeout.

# Response

Response has no data.

Response status reflects result of executing corresponding system administration command, 
i. e. result of initiating requested process.

+ Response 200










# Group License
This resource allows to get list of licensed modules.

    JSON data
    { "modules": [ module-list ] }
    
    module:
        {
            "name": "name",
            "description": "description"
        }

where

<table>
    <th bgcolor="#999999">Field</th>
    <th bgcolor="#999999">Type</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>name</td> <td>String</td> <td>Module name.</td> </tr>
    <tr> <td>description</td> <td>String</td> <td>Module description.</td> </tr>
</table>

## Licensed modules [/license]

### Get list of licensed modules [GET]

+ Response 200 (application/json)
 + Body
 
            { 
                "modules": [ 
                    { 
                        "description": "Inputs video data and body detection events from natural interaction device.", 
                        "name": "NIDeviceReader" 
                    }
                ] 
            } 










# Group Data

This resource allows to retrieve recognition data from current or previous sessions.

# Terminology
When an object is detected, the tracking system forms an internal image of it. This image persists for some time 
after object has disappeared from sight of input device. If the object appears in sight again until its image 
is deleted, it can be recognized as the same object and assigned the same identifier. It is said that object has 
**exited** and **reentered** to a scene. When tracking system has deleted object's image, the object is **lost**. 
Next time this object is detected it will be assigned other identifier.

## GET /data{?type,time,columns,parameters}

# Request

## Query parameters description

### type  
Specifies type of requested objects.  
There are two object types: _Face_ and _Body_. They are tracked separately. 
For tracking bodies a natural interaction input device is needed.
Only one object type can be specified in a request.
         
### time
Objects that was in sight during this time period will be returned.  
The possible values are:
<table>
    <th bgcolor="#999999">Value</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>now</td> <td>Return objects that was in sight in last frame of current session. Data service must be in active mode.</td> </tr>
    <tr> <td>time-time</td> <td>Return objects that was in sight during this time period. See below for details.</td> </tr>
</table>

The _time_ values are specified as UTC in ISO 8601 extended format:

    YYYY-MM-DDTHH:MM:SS
    
### columns

Specifies list of object attributes to return.

The list format is comma-separated (without spaces).

Attributes are divided into **time attributes**, **social attributes**, **state
attributes** and **statistic attributes**.

Here is the brief description of attributes. Detailed description is in Response section.

Time attributes:

<table>
         <th>Name</th>         <th>Description</th>
    
    <tr> <td>enter_time</td>   <td>Time when object was (first) detected.</td> </tr>
    <tr> <td>exit_time</td>    <td>Time when object was last seen.</td> </tr>
    <tr> <td>time_periods</td> <td>Sequence of time periods during which object was in sight
                                   and exited in between.</td> </tr>
</table>

Time attributes can be queried only for time period, but not for the current frame.  


Social attributes (constant attributes of a person):

<table>
         <th>Name</th>              <th>Description</th>
    
    <tr> <td>gender</td>            <td>Person gender.</td> </tr>
    <tr> <td>gender_confidence</td> <td>Confidence of gender value.</td> </tr>
    <tr> <td>age</td>               <td>Person age.</td> </tr>
    <tr> <td>age_confidence</td>    <td>Confidence of age value.</td> </tr>
    <tr> <td>race</td>              <td>Person race.</td> </tr>
    <tr> <td>race_confidence</td>   <td>Confidence of race value.</td> </tr>
</table>

Only Face objects have social attributes. These attributes can be queried for time period or current frame.


State attributes (instant person's state):

<table>
         <th>Name</th> <th>Now</th> <th>Time interval</th>
    
    <tr> <td>screen_position_x</td>  <td>Position - X coordinate.</td> <td>Sequence of object's X positions for given time interval.</td> </tr>
    <tr> <td>screen_position_y</td>  <td>Position - Y coordinate.</td> <td>Sequence of object's Y positions for given time interval.</td> </tr>
    <tr> <td>distance</td>           <td>Distance to camera.</td> <td>The closest distance to camera for given time interval.</td>  </tr>
    <tr> <td>emotion</td>            <td>Person emotion.</td> <td>Sequence of person's emotions for given time interval.</td> </tr>
    <tr> <td>emotion_confidence</td> <td>Confidence of emotion value.</td> <td>Sequence of confidences for emotion values for given time interval.</td> </tr>
    <tr> <td>look</td>               <td>If person looks at camera.</td> <td>Sequence of look indicators.</td> </tr>
    
</table>

Only Face objects have state attributes. These attributes can be queried for time period or current frame.


Statistic attributes:

<table>
         <th>Name</th>         <th>Description</th>
    
    <tr> <td>dwell_time</td>   <td>Time interval from first appearance to exit or current
                                   moment.</td> </tr>
    <tr> <td>face_time</td>    <td>Sum of time intervals when person looked at the camera.</td> </tr>
    <tr> <td>look_count</td> <td>Number of periods when person looked at the camera.</td> </tr>
    <tr> <td>principal_emotion</td> <td>Prevalent person's emotion for all time or time interval.</td> </tr>
</table>

Body objects have `dwell_time` attribute only.

Statistic attributes can be queried for time period or current frame.

### parameters
List of statistic parameters to return.  
Statistic parameters are properties of sets of objects as opposed to individual objects.  
This query parameter is valid only for the `Face` objects and can be queried for time period or current frame.  
`main_person` is available only for current session (time=now).  
The list format is comma-separated (without spaces).  
The statistic parameters are (detailed description is in Response section):

<table>
    <th>Name</th> <th>Description</th>
    <tr> <td>primary_gender</td>  <td>Gender of the Face object longest in view (for all view periods)
                                      during the current session.</td> </tr>
    <tr> <td>majority_gender</td> <td>Current most prominent gender.</td> </tr>
    <tr> <td>majority_emotion</td> <td>Current most prominent emotion.</td> </tr>
    <tr> <td>main_person</td>     <td>Most prominent person.</td> </tr>
</table> 

# Response

    JSON data
    {
        "objects": [ <object>-list ],
        
        "primary_gender": <primary_gender>,
        "majority_gender": <majority_gender>,
        "majority_emotion": <majority_emotion>,
        "main_person": <main_person>
    }
    
    object:
        {
            "session_id": <session_id>,
            "id": <id>,
            
            "enter_time": <enter_time>,
            "exit_time": <exit_time>,
            "clean_exit": <clean_exit>,
            "time_periods": [ <time-period>-list ],
            
            "age": <age>,
            "age_confidence": <age_confidence>,
            "gender": <gender>,
            "gender_confidence": <gender_confidence>,
            "race": <race>,
            "race_confidence": <race_confidence>,
            
            "screen_position_x": <screen_position_x>,
            "screen_position_y": <screen_position_y>,
            "distance": <distance>,
            "emotion": <emotion>,
            "emotion_confidence": <emotion_confidence>,
            "look": <look>,

            "dwell_time": <dwell_time>,
            "face_time": <face_time>,
            "look_count": <look_count>,
            "principal_emotion": <emotion>,
            
            "states" : [ <state>-list ]
        }
    
    time-period:
        {
            "enter_time": <enter_time>,
            "exit_time": <exit_time>
        }
    
    state:
        {
            "timestamp": <timestamp>,
            "emotion": <emotion>,
            "emotion_confidence": <emotion_confidence>,
            "screen_position_x": <screen_position_x>,
            "screen_position_y": <screen_position_y>,
            "look": <look>
        }
        
Some fields can be absent if they were not specified in query.  
The object-list can be empty.  
Some fields can have <code>null</code> value, if they have no any data for time period.  

The following table describes the fields.

<table>
         <th>Field</th>      <th>Type</th>
         <th>Description</th>
    
    <tr class="section-header"><td colspan="3">Identifiers</td></tr>
    
    <tr> <td class="code">session_id</td> <td>Integer</td>
         <td>Data service session ID. Present only if request was made for time period.</td> </tr>
    <tr> <td class="code">id</td>         <td>Integer</td>
         <td>Object ID, unique per session. A pair of session_id and id makes up an installation-wide unique identifier.</td> </tr>
    
    <tr class="section-header"><td colspan="3">Time attributes</td></tr>
    
    <tr> <td class="code">enter_time</td>             <td>DateTime</td>
         <td>Time when object was (first) detected.See “Results for time periods” for details.</td> </tr>
    <tr> <td class="code">exit_time</td>              <td>DateTime</td>
         <td>Time when object was last seen. Note that this can be time when object exited or was
             lost. See “Results for time periods” for details.</td> </tr>
    <tr> <td class="code">clean_exit</td>             <td>Boolean</td>
         <td>Tells if exit_time is taken from actually recorded exit event as opposed to last
             time object was seen before abnormal application termination.
             Present only in time period responses.</td> </tr>
    <tr> <td class="code">time-period.enter_time</td> <td>DateTime</td>
         <td>Start time of time period.
             The enter_time of first period is the same as object.enter_time.
             See “Results for time periods” for details.</td> </tr>
    <tr> <td class="code">time-period.exit_time</td>  <td>DateTime</td>
         <td>End time of time period.
             The exit_time of last period is the same as object.exit_time.
             See “Results for time periods” for details.</td> </tr>
    
    <tr class="section-header"><td colspan="3">Social attributes</td></tr>
    
    <tr> <td class="code">age</td>               
         <td>Real</td>
         <td>Person age. <p><code>Real</code></p>
                         <p><code>undefined</code>, if confidence is low then threshold</p> 
                         <p><code>null</code>, if there are no data</p>
         </td> </tr>
    <tr> <td class="code">age_confidence</td>    <td>Real</td>
         <td>Confidence of age value in interval [0, 1].</td> </tr>
         
    <tr> <td class="code">gender</td>            
         <td>String</td>
         <td><p>Person gender: <code>male</code> or <code>female</code>.</p>
             <p><code>undefined</code>, if confidence is low then threshold</p> 
             <p><code>null</code>, if there are no data</p>
         </td> </tr>
    <tr> <td class="code">gender_confidence</td> <td>Real</td>
         <td>Confidence of gender value in interval [0, 1].</td> </tr>
         
    <tr> <td class="code">race</td>              <td>String</td>
         <td><p>Person race: <code>white</code>, <code>black</code>, <code>asian</code>,
                <code>arab</code>, <code>hispanic</code></p>
                <p><code>undefined</code>, if confidence is low then threshold</p> 
                <p><code>null</code>, if there are no data</p>
        </td> </tr>
    <tr> <td class="code">race_confidence</td>   <td>Real</td>
         <td>Confidence of race value in interval [0, 1].</td> </tr>
         
    
    <tr class="section-header"><td colspan="3">State attributes</td></tr>
    
    <tr> <td class="code">screen_position_x</td>  <td>Real</td>
         <td>X position of object center in pixels.</td> </tr>
    <tr> <td class="code">screen_position_y</td>  <td>Real</td>
         <td>Y position of object center in pixels.</td> </tr>
    <tr> <td class="code">distance</td>           <td>Real</td>
         <td>Distance to camera, meters.</td> </tr>
    <tr> <td class="code">emotion</td>            <td>String</td>
         <td><p>Person's emotion: <code>neutral</code>, <code>happy</code>,
                <code>sad/perplexed</code>, <code>surprised/afraid</code>,
                <code>angry/disgusted</code>.</p>
                <p><code>undefined</code>, if confidence is low then threshold</p> 
                <p><code>null</code>, if there are no data</p>
        </td> </tr>
    <tr> <td class="code">emotion_confidence</td> <td>Real</td>
         <td>Confidence of emotion value in interval [0, 1].</td> </tr>
    <tr> <td class="code">look</td>               <td>Boolean</td>
         <td>If person looks at the camera.</td> </tr>
         
    <tr class="section-header"><td colspan="3">States for time periods:</td></tr>
    <tr> <td class="code">timestamp</td> <td>Integer</td>
         <td>Number of milliseconds since 1970-01-01 00:00:00 UTC.</td>  </tr>
    
    <tr class="section-header"><td colspan="3">Statistic attributes</td></tr>
    
    <tr> <td class="code">dwell_time</td>   <td>Real</td>
         <td>Time interval from first appearance to exit or current moment, seconds.</td> </tr>
    <tr> <td class="code">face_time</td>    <td>Real</td>
         <td>Sum of time intervals when person looked at the camera, seconds.</td> </tr>
    <tr> <td class="code">look_count</td> <td>Integer</td>
         <td>Number of periods when person looked at the camera.</td> </tr>
    <tr> <td class="code">principal_emotion</td> <td>String</td>
         <td><p>Person's prevalent emotion: <code>neutral</code>, <code>happy</code>,
                <code>sad/perplexed</code>, <code>surprised/afraid</code>,
                <code>angry/disgusted</code> or <code>undefined</code>.
                <br/>For <code>time=now</code> queries it indicate the most common emotion for a person
                during all session, for <code>time-time</code> queries - within given time interval.
                <br/><code>undefined</code> value could be returned when the confidence of any specific value is low.</p>
                <p><code>null</code>, if there are no data</p>
                </td> </tr>
    
    <tr class="section-header"><td colspan="3">Statistic parameters</td></tr>
    
    <tr> <td class="code">primary_gender</td> 
         <td>String</td> 
         <td>Gender of the Face object longest in view (for all view periods) during the current
             session. If there are two or more objects with equal duration, the one that was
             detected first is returned.<br />
             <p>Note that objects with undefined gender are counted.</p>
             <p>Value: <code>"male"</code>, <code>"female"</code>, <code>"undefined"</code> or
                <code>null</code> if no Face objects have been seen yet.</p>
         </td> 
    </tr>
    <tr> <td class="code">majority_gender</td> 
         <td>String</td> 
         <td>Represents the current most prominent gender. The algorithm is as follows.<br />
             &emsp;Objects with undefined gender are not counted.<br />
             &emsp;If there are no objects, return null.<br />
             &emsp;Else, if number of objects of one gender in the current frame is greater, return that gender.<br />
             &emsp;Else compare sums of confidences for both genders in the current frame. If one sum is greater, return corre­sponding gender.<br />
             &emsp;Else compare sums of durations of last view periods for both genders. If one sum is greater, return corre­sponding gender.<br />
             &emsp;Else compare durations of last view periods for one male and one female with maximal values. If one is greater, return corresponding gender.<br />
             &emsp;Else return male gender.<br />
             <p>Value: <code>"male"</code>, <code>"female"</code>, <code>"undefined"</code> or <code>null</code> if there are no
                active male or female Face objects.</p>
        </td>
    </tr>
    <tr> <td class="code">majority_emotion</td> 
         <td>String</td> 
         <td><p>Represents the current most prominent emotion.
         <br/>Value: <code>neutral</code>, <code>happy</code>,
                <code>sad/perplexed</code>, <code>surprised/afraid</code>,
                <code>angry/disgusted</code>, <code>undefined</code> or <code>null</code>
                (if there are no active Face objects).
            </p>
        </td>
    </tr>
    <tr> <td class="code">main_person</td> 
         <td>Integer</td> 
         <td> ID of face that:<br />
              &emsp;1) has maximal face_time parameter.<br />
              &emsp;2) has the minimal distance parameter (for faces that satisfied the previous condition)<br />
              &emsp;3) has maximal dwell_time parameter (for faces that satisfied the previous conditions)<br />
              &emsp;4) the one that was detected first (for faces that satisfied the previous conditions)<br />
              <p>Value: <code>ID</code> or <code>null</code> if there are no active objects.</p>
        </td> 
    </tr>
</table>

Here the DateTime type is String containing date and time written as UTC in ISO 8601 extended format:

    YYYY-MM-DDTHH:MM:SS

When data for time period is requested, returned values of social attributes correspond to time
moment `exit_time`.

## Results for time periods  

When request is made for a time period, the application determines which objects were in sight during this period and then returns the most complete information it has on that objects. The enter_time and exit_time parameters contain the very first (last) time an object was seen. So the enter_time might be before requested period and exit_time might be after it. The same applies to time_periods parameter - it contains all periods when person was in sight.  

For example, consider the following timeline:  

    person_time_1_1   - person was first detected  
    ...  
    person_time_1_2   - person temporarily disappeared  
    ...  
    query_time1 
    ...  
    person_time_2_1   - person re-entered  
    ...  
    query_time2  
    ...  
    person_time_2_2   - person was lost  

The requested time period is

    time=query_time1-query_time2
    
The result would be:

    "objects": [
      {
        "age": ...,   <- corresponds to person_time_2_2
        ... 
        "enter_time": person_time_1_1,
        "exit_time": person_time_2_2,
        ... 
        "time_periods": [
          {
            "enter_time": person_time_1_1,
            "exit_time": person_time_1_2
          },
          {
            "enter_time": person_time_2_1,
            "exit_time": person_time_2_2
          }
        ],
        ...
      }
    ]

+ Response 200 (application/json)
 + Body
 
            { 
                "objects": [ 
                    { 
                        "age": 24.8413,
                        "age_confidence": 0.489896,
                        "clean_exit": false,
                        "distance": 1.364,
                        "dwell_time": 371967,
                        "emotion": "neutral",
                        "enter_time": "2014-03-19T08:41:59", 
                        "exit_time": "2014-03-19T08:42:25", 
                        "face_time": 284372,
                        "gender": "male", 
                        "gender_confidence": 0.460317,
                        "id": 0,
                        "look": true,
                        "look_count": 4,
                        "race": "white",
                        "screen_position_x": 385.732,
                        "screen_position_y": 278.8638,
                        "session_id": 147, 
                        "time_periods": [ 
                            { 
                                "enter_time": "2014-03-19T08:41:59", 
                                "exit_time": "2014-03-19T08:42:25" 
                            } 
                        ] 
                    }
                ] 
            }

+ Parameters

    + type (required, string, `Face`)
    
        Object type
        
        + Values
        
            + `Face`
            
            + `Body`
            
    + time (required, string, `now`)
    
        Discrete time or time period in format YYYY-MM-DDTHH:MM:SS-YYYY-MM-DDTHH:MM:SS
        
        + Values
        
            + `now`
            
            + `YYYY-MM-DDTHH:MM:SS-YYYY-MM-DDTHH:MM:SS`
            
    + columns (optional, string, `age`)
    
        List of possible values, format is comma-separated (without spaces), for example `age,gender`
        
        + Values
        
            + `enter_time`
            
            + `exit_time`
            
            + `time_periods`
            
            + `gender`
            
            + `gender_confidence`
            
            + `age`
            
            + `age_confidence`
            
            + `race`
            
            + `race_confidence`
            
            + `screen_position_x`
            
            + `screen_position_y`
            
            + `distance`
            
            + `emotion`
            
            + `emotion_confidence`
            
            + `look`
            
            + `dwell_time`
            
            + `face_time`
            
            + `look_count`
            
            + `principal_emotion`
            
    + parameters (optional, string, `primary_gender`)
    
        List of possible values, format is comma-separated (without spaces), for example `primary_gender,main_person`
        
        + Values
        
            + `primary_gender`
            
            + `majority_gender`
            
            + `majority_emotion`
            
            + `main_person`










# Group Video

This resource allows to get video stream with recognition visualization marks in M-JPEG format.

## Video stream [/video]

### Get video stream [GET]

# Response

Response has M-JPEG format, which essentially is a sequence of JPEG images. The header contains field

    Content-Type: multipart/x-mixed-replace;boundary=multipart_boundary

Each frame's block of data has format

    --multipart_boundary\r\n
    Content-Type: image/jpeg\r\n
    Content-Length: jpeg-length\r\n
    \r\n
    jpeg

where

<table>
    <th bgcolor="#999999">Field</th>
    <th bgcolor="#999999">Description</th>
    <tr> <td>jpeg-length</td> <td>Length of frame image JPEG in bytes.</td> </tr>
    <tr> <td>jpeg</td> <td>Frame image JPEG data.</td> </tr>
</table>

Frame image size is 640x480 pixels.

+ Response 200

 + Headers
        
            Content-Type: multipart/x-mixed-replace;boundary=multipart_boundary
        
 + Body
 
            --multipart_boundary\r\n
            Content-Type: image/jpeg\r\n
            Content-Length: 4\r\n
            \r\n
            jpeg










# Group Snapshots

This resource allows to save snapshot image of input video stream. Input video stream is the stream produced by 
input device. It does not display recognition marks.

## Current snapshots [/snapshots]

### Save snapshot of last input frame and return its URL [POST]

Image is saved in JPEG format. Its parameters and location are determined by settings of VisualSnapshotSaver module and can be configured via API.
If two or more requests are made for the same frame, snapshot is saved once.

# Response

Successful response has status 201 Created and header field Location specifying absolute URL of created snapshot.

    JSON data
    { "path": "path" }

where _"path"_ is the path part of URL of saved snapshot image.

The URL path is made by replacing base part of filesystem path, specified by setting 

    { 
        "modules" : { 
                "VisualSnapshotSaverHttpInterface" : { 
                    "path_find" : "path"
                }
        }
    } 

with path, specified by setting 

The URL path is made by replacing base part of filesystem path, specified by setting 

    { 
        "modules" : { 
                "VisualSnapshotSaverHttpInterface" : { 
                    "path_replace" : "path"
                }
        }
    }

It is the opposite to what Web server does with a path, so configurations of VisualSnapshotSaverHttpInterface 
and NGINX must be synchronized.

Snapshot file name has form

    date-time.jpg
    
where _date-time_ is UTC date and time of corresponding frame, represented according to ISO 8601, 
with 3-digit milliseconds:

    YYYY-MM-DDThh:mm:ss.sss
    
## Example

Path remapping settings:

    { 
        "modules" : { 
                "VisualSnapshotSaverHttpInterface" : { 
                    "path_find" : /var/lib/look/snapshots,
                    "path_replace" : /snapshot_files
                }
        }
    }

NGINX configuration (relevant part):

    server { 
        location /snapshot_files { 
            alias /var/lib/look/snapshots; 
        }
    }
    
Then the snapshot

    /var/lib/look/snapshots/2012-06-20/2012-06-20T17:26:31.351.jpg
    
has URL

    http://kiosk-1:8181/snapshot_files/2012-06-20/2012-06-20T17:26:31.351.jpg

+ Response 201 (application/json)

 + Headers
 
            Location: https://localhost:8182/snapshot_files/2012-09-18/2012-09-18T17:07:17.893.jpg

 + Body
 
            {
                "path" : "/snapshot_files/2012-09-18/2012-09-18T17:07:17.893.jpg" 
            }


## Get current snapshots [/snapshots/current]

### Get snapshot image of last input frame [GET]
This resource provides the possibility to get snapshot image of input video stream.  
Input video stream is the stream produced by input device. It does not have markup.
Image has PNG format. The image size is original.

#Response
Body contains snapshot image in PNG format. Content-Type is image/png.


+ Response 200 (image/png)










# Group Event notification

Client can define subscribers to various events, which receive notifications (HTTP requests) when events occur.

Subscriber is defined by URL and HTTP method.

    Subscriber:
        {
            "id" : id,
            
            "url" : "url",
            "method" : "method",
            
            "event_filters" : [ <EventFilter>-list ]
        }

where

<table>
    <th>Field</th>              <th>Type</th>    <th>Description</th>
    
    <tr><td>id</td>            
        <td>Integer</td>
        <td>Subscriber ID.<br/>
            This field is read-only.</td> </tr>
    <tr><td>url</td>
        <td>String</td>
        <td>URL which receives HTTP request on event.</td> </tr>
    <tr><td>method</td>
        <td>String</td>
        <td>HTTP method used in request to subscriber on event. <br/>
            Now only <code>PUT</code> and <code>POST</code> are available.</td> </tr>
    <tr> <td>event_filters</td> <td>Array</td>
         <td>Filters defining which events this subscriber receives.<br/>
             Conceptually this field specifies <b>subscriptions</b> of the subscriber.<br/>
             This field is also available via separate resource.</td> </tr>
</table>

Conceptually subscriber's subscription is information separate from subscriber itself, and has
its own resource. The `event_filters` field is merely a shortcut allowing to set subscriber and
its subscriptions in one request. As a consequence, `event_filters` field
- can be omitted when adding new subscriber;
- is not considered when comparing subscribers for equality.


## Conceptual structure of events

Note that this project is aimed to define universal event mechanism for LOOK and MOVE, and
also contains speculations about possible future events.

All events fall into three **types**:

1. object attribute changed - age, gender, distance etc;
2. statistic parameter changed - primary gender, main person etc;
3. object interacted with target - object moved into/out of scene or area, crossed line,
                                   person took an article into basket etc.

Applications can work with different types of objects. Particularly, LOOK handles faces and bodies
separately. Object types differ in possible attributes, statistic parameters and interactions.
So each event conceptually has field `object_type`.



### Object types

#### 1. Object attribute changed

Conceptually the structure of this event is

    {
        event_type: attribute_change
        object_type:
        object_id:
        
        attribute:
        value:
        previous_value:
        range:            # For continuous attributes
        previous_range:   # (see below)
    }


#### 2. Statistic parameter changed

    {
        event_type: statistic_parameter_change
        object_type:
        
        parameter:
        value:
        previous_value:
    }


#### 3. Object interacted with target

    {
        event_type: interaction
        object_type:
        object_id:
        
        target_type:   # scene, area, line, article etc
        target_id:
        interaction_type:
        interaction_direction:
    }


<div class="dev-comment">
<p>Often a value of one field implies specific value of other field(s). For example, object can
interact with an area in single way - moving in/out of it. So <code>event_type: interaction
</code> and <code>target_type: area</code> imply <code>interaction_type: move</code>.</p>

<p>Also we want to limit possibilities for client errors in requests, particularly concerning
specification of several values in some fields. For example, faces and bodies have different
attributes, so the filter</p>

<pre>
{
    event_type: attribute_change,
    object_type: [ face, body ],
    attribute: [ age, distance ]
}</pre>

<p>would be confusing because bodies do not have <code>age</code> attribute. We can eliminate the
potential confusion by removing <code>object_type</code> and combining it with <code>event_type</code>.
</p>

<p>These reasons lead us to concept of <b>event class</b>.</p>
</div>


For convenience, several conceptual fields combine into one actual field `event_class`.

<table>
    <th>Event class</th>                         <th>Corresponding conceptual fields</th>

    <tr class="section-header"> <td colspan="2"> LOOK </td> </tr>
    <tr class="code"> <td>face_attribute_change</td> <td> event_type: attribute_change<br/>
                                                          object_type: face                 </td> </tr>
    <tr class="code"> <td>body_attribute_change</td> <td> event_type: attribute_change<br/>
                                                          object_type: body                 </td> </tr>
    <tr class="code"> <td>face_scene_move</td>       <td> event_type: interaction<br/>
                                                          object_type: face<br/>
                                                          target_type: scene<br/>
                                                          target_id: undefined<br/>
                                                          interaction_type: move            </td> </tr>
    <tr class="code"> <td>body_scene_move</td>       <td> event_type: interaction<br/>
                                                          object_type: body<br/>
                                                          target_type: scene<br/>
                                                          target_id: undefined<br/>
                                                          interaction_type: move            </td> </tr>
    <tr class="code"> <td>face_statistic_parameter_change</td>
                                                     <td> event_type: statistic_parameter_change <br/>
                                                          object_type: face                 </td> </tr>
    <tr class="section-header"> <td colspan="2"> MOVE </td> </tr>
    <tr class="code"> <td>area_move</td>             <td> event_type: interaction<br/>
                                                          object_type: person<br/>
                                                          target_type: area<br/>
                                                          interaction_type: move            </td> </tr>
    <tr class="code"> <td>line_cross</td>            <td> event_type: interaction<br/>
                                                          object_type: person<br/>
                                                          target_type: line<br/>
                                                          interaction_type: cross           </td> </tr>
    <tr class="section-header"> <td colspan="2"> Speculation: customer interacts with article </td> </tr>
    <tr class="code"> <td>article_interaction</td>   <td> event_type: interaction<br/>
                                                          object_type: person<br/>
                                                          target_type: article              </td> </tr>
</table>


<br/>
<br/>


## Common structure of filters and notifications

Common structure of EventFilter is

    EventFilter:
        {
            "event_class": <event_class>,
            # Class-specific fields
        }
    

Common structure of notification JSON object is

    {
        "event": {
            "timestamp": <timestamp>,
            "event_class": <event_class>,
            # Class-specific fields
        },
        "object": <object>
    }

where

<table>
    <th>Field</th> <th>Type</th> <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">object</td>
        <td>Object</td>
        <td><p>State of object referred to by event (if any), corresponding to event time.</p>
            <p>Structure is the same as for current state data request
               (<code>/data?time=now</code>).</p>
        </td>
    </tr>
</table>


<br/>
<br/>


## Event classes

### Object attribute change

#### Filter

    EventFilter:
        {
            "event_class": "face_attribute_change" | "body_attribute_change",
            "attribute": [ <attribute>-list ] | "*"
        }

Possible values of `<attribute>` are:<br/>
for faces - `age`, `age_confidence`, `gender`, `gender_confidence`, 
`race`, `race_confidence`, `emotion`, `emotion_confidence`, `look`, `distance`;<br/>
for bodies - `distance`. This filter has no effect.<br/>
Description of attributes see in `/data` resource section.
The `"*"` means all attributes corresponding to object type specified by event class (face or body).


##### Examples

Filter for any face attribute change:

    {
        "event_class": "face_attribute_change",
        "attribute": "*"
    }
    
Filter for face gender or age change:

    {
        "event_class": "face_attribute_change",
        "attribute": ["gender", "age"]
    }


#### Notification

    {
        "event": {
            "timestamp": <timestamp>,
            "event_class": "face_attribute_change" | "body_attribute_change",
            "object_id": <object_id>,
            "attribute": <attribute>,
            "value": <value>,
            "previous_value": <previous_value>,
            "range": <range>,
            "previous_range": <previous_range>
        },
        object: <object>
    }

where

<table>
    <th>Field</th>           <th>Type</th>      <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">object_id</td>
        <td>Integer</td>
        <td>ID of object whose attribute has changed.</td>
    </tr>
    <tr>
        <td class="code">attribute</td>
        <td>String</td>
        <td>Name of attribute that has changed.</td>
    </tr>
    <tr>
        <td class="code">value</td>
        <td>Depends on attribute</td>
        <td>New attribute value.</td>
    </tr>
    <tr>
        <td class="code">previous_value</td>
        <td>Depends on attribute</td>
        <td>Previous attribute value.</td>
    </tr>
    <tr>
        <td class="code">range</td>
        <td>String</td>
        <td>Name of subrange new value falls into.<br/>
            Present only for continuous attributes.</td>
    </tr>
    <tr>
        <td class="code">previous_range</td>
        <td>String</td>
        <td>Name of subrange previous value falls into.<br/>
            Present only for continuous attributes.</td>
    </tr>
    <tr>
        <td class="code">object</td>
        <td>Object</td>
        <td><p>State of object referred to by <code>&lt;object_id&gt;</code>, corresponding to
               event time.</p>
            <p>Structure is the same as for current state data request
               (<code>/data?time=now</code>).</p>
        </td>
    </tr>
</table>

Note that `range` always has value different from `previous_range` because this is the essence of
the event.


##### Examples

    {
        "event": {
            "timestamp": 1362133259629,
            "event_class": "face_attribute_change",
            "object_id": 11,
            "attribute": "gender",
            "value": "female",
            "previous_value": "male"
        },
        "object": { 
            "age": 32,
            "age_confidence": 0.87,
            "distance": 1.1,
            "emotion": "happy",
            "emotion_confidence": 0.74,
            "gender": "female",
            "gender_confidence": 0.78,
            "look": false,
            "race": "white",
            "race_confidence": 0.76,
            "screen_position_x": 320,
            "screen_position_y": 467,
        }
    }
&nbsp;

    {
        "event": {
            "timestamp": 1362133259629,
            "event_class": "body_attribute_change",
            "object_id": 22,
            "attribute": "distance",
            "value": 0.5,
            "previous_value": 1.1,
            "range": "close",
            "previous_range": "middle"
        },
        "object": { 
            "screen_position_x": 320,
            "screen_position_y": 467,
        }
    }


<br/>
<br/>


### Statistic parameter change

#### Filter

    EventFilter:
        {
            "event_class": "face_statistic_parameter_change",
            "parameter": [ <parameter>-list ] | "*"
        }
    
where `<parameter>` is one of `primary_gender`, `majority_gender`, `majority_emotion` or `main_person`. Description
of parameters see in `/data` resource section.
The `"*"` means all attributes corresponding to object type specified by event class (face).


##### Examples

Filter for any statistic parameters change:

    {
        "event_class": "face_statistic_parameter_change",
        "parameter": "*"
    }
    
Filter for `primary_gender` and `main_person` parameters change:

    {
        "event_class": "face_statistic_parameter_change",
        "parameter": ["primary_gender", "main_person"]
    }


#### Notification

    {
        "event": {
            "timestamp": <timestamp>,
            "event_class": "face_statistic_parameter_change",
            "parameter": <parameter>,
            "value": <value>,
            "previous_value": <previous_value>
        },
        object: <object>
    }
    
where

<table>
    <th>Field</th>           <th>Type</th>      <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">parameter</td>
        <td>String</td>
        <td>Name of parameter that has changed.</td>
    </tr>
    <tr>
        <td class="code">value</td>
        <td>Depends on parameter</td>
        <td>New parameter value.</td>
    </tr>
    <tr>
        <td class="code">previous_value</td>
        <td>Depends on parameter</td>
        <td>Previous parameter value.</td>
    </tr>
    <tr>
        <td class="code">object</td>
        <td>Object</td>
        <td><p>If parameter is <code>main_person</code>, this is state of object with ID specified
               by <code>&lt;value&gt;</code> (new main person), corresponding to event time.</p>
            <p>Present only if parameter is <code>main_person</code>.</p>
            <p>Structure is the same as for current state data request
               (<code>/data?time=now</code>).</p>
        </td>
    </tr>
</table>


##### Example

    {
        "event": {
            "timestamp": 1362133259629,
            "event_class": "face_statistic_parameter_change",
            "parameter": "primary_gender",
            "value": "male",
            "previous_value": "female"
        }
    }


<br/>
<br/>


### Scene interaction (dwell events)

#### Filter

    EventFilter:
        {
            "event_class": "face_scene_move" | "body_scene_move",
            "interaction_direction": [ <interaction_direction>-list ] | "*"
        }
    
where `<interaction_direction>` is `in` or `out`.
The `"*"` means either direction.


##### Examples

Filter for faces entering and exiting the scene:

    {
        "event_class": "face_scene_move",
        "interaction_direction": "*"
    }
    
Filter for bodies entering the scene:

    {
        "event_class": "body_scene_move",
        "interaction_direction": [ "in" ]
    }

    
#### Notification

    {
        "event": {
            "timestamp": <timestamp>,
            "event_class": "face_scene_move" | "body_scene_move",
            "object_id": <object_id>,
            "interaction_direction": <direction>
        },
        "object": <object>
    }
    
where

<table>
    <th>Field</th>           <th>Type</th>      <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">object_id</td>
        <td>Integer</td>
        <td>ID of object.</td>
    </tr>
    <tr>
        <td class="code">direction</td>
        <td>String</td>
        <td><p>Possible values are <code>in</code> and <code>out</code></p></td>
    </tr>
    <tr>
        <td class="code">object</td>
        <td>Object</td>
        <td><p>State of object referred to by <code>&lt;object_id&gt;</code>, corresponding to
               event time.</p>
            <p>Structure is the same as for current state data request
               (<code>/data?time=now</code>).</p>
        </td>
    </tr>
</table>


##### Examples

    {
        "event": {
            "event_class": "face_scene_move",
            "timestamp": 1362133259629,
            "object_id": 11,
            "interaction_direction": "in"
        },
        "object": { 
            "age": 32,
            "age_confidence": 0.87,
            "distance": 1.1,
            "emotion": "happy",
            "emotion_confidence": 0.74,
            "gender": "female",
            "gender_confidence": 0.78,
            "look": false,
            "race": "white",
            "race_confidence": 0.76,
            "screen_position_x": 320,
            "screen_position_y": 467,
        }
    }
&nbsp;

    {
        "event": {
            "event_class": "body_scene_move",
            "timestamp": 1362133259629,
            "object_id": 22,
            "interaction_direction": "out"
        },
        "object": { 
            "distance": 3.1,
            "screen_position_x": 320,
            "screen_position_y": 467,
        }
    }


<br/>
<br/>


### Interaction with area sensor (MOVE)

#### Filter

    EventFilter:
        {
            "event_class": "area_move",
            "target_id": [ <target_id>-list ] | "*",
            "interaction_direction": [ <direction>-list ] | "*"
        }

See description of fields below.


##### Examples

Filter for objects moving in/out of any area sensor:

    {
        "event_class": "area_move",
        "target_id": "*",
        "interaction_direction": "*"
    }
    
Filter for objects entering area with ID = 1:

    {
        "event_class": "area_move",
        "target_id": [ 1 ],
        "interaction_direction": [ "in" ]
    }

    
#### Notification

    {
        "timestamp": <timestamp>,
        "event_class": "area_move",
        "object_id": <object_id>,
        "target_id": <target_id>,
        "interaction_direction": <direction>
    }

where

<table>
    <th>Field</th> <th>Type</th> <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">object_id</td>
        <td>Integer</td>
        <td>ID of object.</td>
    </tr>
    <tr>
        <td class="code">target_id</td>
        <td>Integer</td>
        <td>ID of area sensor.</td>
    </tr>
    <tr>
        <td class="code">direction</td>
        <td>String</td>
        <td><p>Possible values are <code>in</code> and <code>out</code></p></td>
    </tr>
</table>


#### Example

    {
        "timestamp": 1362133259629,
        "event_class": "area_move",
        "object_id": 11,
        "target_id": 5,
        "interaction_direction": "in",
    }


<br/>
<br/>


### Interaction with line sensor (MOVE)

#### Filter

    EventFilter:
        {
            "event_class": "line_cross",
            "target_id": [ <target_id>-list ] | "*",
            "interaction_direction": [ <direction>-list ] | "*"
        }
    
See description of fields below.

    
##### Examples

Filter for objects crossing any line sensor in any direction:

    {
        "event_class": "line_cross",
        "target_id": "*",
        "interaction_direction": "*"
    }
    
Filter for objects crossing line sensor with ID = 1 from left to right:

    {
        "event_class": "line_cross",
        "target_id": [ 1 ],
        "interaction_direction": [ "left_to_right" ]
    }

    
#### Notification

    {
        "timestamp": <timestamp>,
        "event_class": "line_cross",
        "object_id": <object_id>,
        "target_id": <target_id>,
        "interaction_direction": <direction>
    }

where

<table>
    <th>Field</th> <th>Type</th> <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">object_id</td>
        <td>Integer</td>
        <td>ID of object.</td>
    </tr>
    <tr>
        <td class="code">target_id</td>
        <td>Integer</td>
        <td>ID of line sensor.</td>
    </tr>
    <tr>
        <td class="code">direction</td>
        <td>String</td>
        <td><p>Possible values are <code>left_to_right</code> and <code>right_to_left</code>.</p></td>
    </tr>
</table>


##### Example

    {
        "timestamp": 1362133259629,
        "event_class": "line_cross",
        "object_id": 11,
        "target_id": 5,
        "interaction_direction": "left_to_right",
    }


<br/>
<br/>


### Interaction with article (speculation)

#### Filter

    EventFilter:
        {
            "event_class": "article_interaction",
            "interaction_type": [ <interaction_type>-list ] | "*",
            "interaction_direction": [ <direction>-list] | "*",
            "target_id": [ <target_id>-list ] | "*"
        }
    
See decription of fields below.


##### Examples

Filter for any interaction with any article:

    {
        "event_class": "article_interaction",
        "interaction_type": "*",
        "interaction_direction": "*",
        "target_id": "*"
    }
    
Filter for cases when customer looks at or takes articles with ID 2 or 15:

    {
        "event_class": "article_interaction",
        "interaction_type": [ "look", "take" ],
        "interaction_direction": [ "begin" ]
        "target_id": [ 2, 15 ],
    }


#### Notification

    {
        "timestamp": <timestamp>,
        "event_class": "article_interaction",
        "person_id": <object_id>,
        "target_id": <target_id>,
        "interaction_type": <interaction_type>,
        "interaction_direction": <direction>
    }

where

<table>
    <th>Field</th> <th>Type</th> <th>Description</th>
    
    <tr>
        <td class="code">timestamp</td>
        <td>ApiTimeMs</td>
        <td>Timestamp of frame event occured on.</td>
    </tr>
    <tr>
        <td class="code">event_class</td>
        <td>String</td>
        <td>Event class.</td>
    </tr>
    <tr>
        <td class="code">object_id</td>
        <td>Integer</td>
        <td>ID of object.</td>
    </tr>
    <tr>
        <td class="code">interaction_type</td>
        <td>String</td>
        <td><p>Possible values are <code>look</code> (customer looks at the article),
               <code>examine</code> (holds and examines the article), <code>take</code>
               (takes the article into his basket)</p></td>
    </tr>
    <tr>
        <td class="code">direction</td>
        <td>String</td>
        <td><p>Possible values are <code>begin</code> (interaction has began) and <code>end</code>
               (interaction has ended)</p></td>
    </tr>
    <tr>
        <td class="code">target_id</td>
        <td>Integer</td>
        <td>ID of article.</td>
    </tr>
</table>
    

##### Example

    {
        "timestamp": 1362133259629,
        "event_class": "article_interaction",
        "object_id": 11,
        "interaction_type": "look",
        "interaction_direction": "begin",
        "target_id": 5
    }


<br/>
<br/>


## Event subscribers collection [/notification_service/subscribers]

This resource represents the collection of all event subscribers, along with their subscriptions.


### Get subscribers and their subscriptions [GET]

#### Request body

No.


#### Response

##### Body

    [ <Subscriber>-list ]


+ Response 200 (application/json)
    
    + Body
    
            [
                {
                    "id": 0,
                    "url": "http://<subscriber_path>",
                    "method": "GET",
                    "event_filters": [
                        {
                            "event_class": "face_attribute_change",
                            "attribute": ["gender", "age", "look"]
                        }
                    ]
                }
            ]



### Update collection of subscribers with their subscriptions [PUT]

Subscribers, having ID specified, are updated as if individual PUT was called for each of them.
Subscribers, having no ID specified, are added as if individual POST was called for each of them.
Existing subscribers, not specified (by ID) in request, are deleted as if individual DELETE was
called for each of them.

See individual PUT, POST, DELETE operations for additional notes.

Note. One of methods to preserve contents of a subscriber, is to specify only its ID and no
other fields.


#### Request body

    [ <Subscriber>-list ]


#### Response

##### Body

Array of IDs assigned to subscribers specified in request, in corresponding order.

##### Errors

<table>
    <th>Condition</th>                                  <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>           <td class="code">409 Conflict</td></tr>
    <tr><td><p>Invalid structure of <code>Subscriber</code> object.</p></td>
                                                        <td class="code">400 Bad Request</td></tr>
    <tr><td>Request contains equal subscribers.</td>    <td class="code">400 Bad Request</td></tr>
    <tr><td>After applying the request the collection would contain equal subscribers.</td>
                                                        <td class="code">409 Conflict</td></tr>
    <tr><td>Unknown subscriber ID.</td>                 <td class="code">409 Conflict</td></tr>
</table>

Note that subscriptions (`event_filters` field) are not considered for determining equality of
subscribers.

Also there might be errors related to event filters (see
`/notification_service/subscribers/{id}/event_filters`).


+ Request (application/json)
    
    + Body

            [
                {
                    "url": "http://localhost:8281/event.php",
                    "method": "PUT",
                    "event_filters": [
                        {
                            "event_class": "face_attribute_change",
                            "attribute": ["gender", "age", "look", "distance"]
                        },
                        {
                            "event_class": "body_attribute_change",
                            "attribute": ["distance"]
                        }
                    ]
                },
                {
                    "url": "http://192.168.1.10:8080/event.php",
                    "method": "POST",
                    "event_filters": [
                        {
                            "class": "face_statistic_parameter_change",
                            "attribute": ["main_person"]
                        }
                    ]
                }
            ]
    
+ Response 200 (application/json)

    + Body
    
            [
                0,
                1
            ]


### Add subscriber and, optionally, its subscriptions [POST]

#### Request body

    <Subscriber>

Field `id` must be absent. Field `event_filters` may be absent.

If field `event_filters` is present, it is processed after subscriber is created as if
`PUT /notification_service/subscribers/{id}/event_filters` was called.

#### Response

On success the response status is `201 Created` and `Location` header field contains URL of created
subscriber.

##### Body

    { "id": id }
where `id` is ID assigned to created subscriber.

##### Errors

<table>
    <th>Condition</th> <th>Status</th> <th>Headers</th>
    
    <tr>
        <td>Service is not in idle mode.</td>
        <td class="code">409 Conflict</td>
    </tr>
    <tr>
        <td><p>Invalid structure of <code>Subscriber</code> object.</p></td>
        <td class="code">400 Bad Request</td>
    </tr>
    <tr>
        <td>Given subscriber is equal to an already existing.</td>
        <td class="code">303 See Other</td>
        <td><p><code>Location</code> contains URL of existing subscriber.</p></td>
    </tr>
</table>

Note that subscriptions (`event_filters` field) are not considered for determining equality of
subscribers.

Also there might be errors related to event filters (see
`/notification_service/subscribers/{id}/event_filters`).


+ Request (application/json)

    + Body
    
            {
                "url": "http://<subscriber_path>",
                "method": "PUT",
                "event_filters": [
                    {
                        "event_class": "face_statistic_parameter_change",
                        "attribute": ["main_person"]
                    }
                ]
            }


+ Response 201 (application/json)

    + Headers
    
            Location: http://<host>/notification_service/subscribers/2
        
    + Body
    
            {
                "id": 2
            }


### Delete all subscribers with their subscriptions [DELETE]

#### Request body

No.

#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th>                                  <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>           <td class="code">409 Conflict</td></tr>
</table>


+ Response 200



## Event subscriber [/notification_service/subscribers/{id}]

This resource represents event subscriber with identifier `id` and, optionally, its subscription.

+ Parameters

    + id (required, number, `1`)
        
        Subscriber ID


### Get subscriber and its subscriptions [GET]

#### Request body

No.

#### Response

##### Body

    <Subscriber>


+ Response 200 (application/json)
    
    + Body
        
            {
                "url": "http://<subscriber_path>",
                "method": "PUT",
                "event_filters": [
                    {
                        "event_class": "face_statistic_parameter_change",
                        "attribute": ["main_person"]
                    }
                ]
            }


### Update subscriber and/or its subscriptions [PUT]

After update the subscriber must not be equal to any other.


#### Request body

    <Subscriber>

Field `id` must be either absent or equal to parameter `id`. Any other field may be absent.

If field `event_filters` is present, it is processed after subscriber is updated as if
`PUT /notification_service/subscribers/{id}/event_filters` was called.


#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th> <th>Status</th> <th>Headers</th>
    
    <tr>
        <td>Service is not in idle mode.</td>
        <td class="code">409 Conflict</td>
    </tr>
    <tr>
        <td><p>Field <code>id</code> is present and differs from parameter <code>id</code>.</p></td>
        <td class="code">400 Bad Request</td>
    </tr>
    <tr>
        <td><p>Invalid structure of <code>Subscriber</code> object.</p></td>
        <td class="code">400 Bad Request</td>
    </tr>
    <tr>
        <td>After update this subscriber would be equal to other.</td>
        <td class="code">303 See Other</td>
        <td><p><code>Location</code> contains URL of other subscriber.</p></td>
    </tr>
</table>

Note that subscriptions (`event_filters` field) are not considered for determining equality of
subscribers.

Also there might be errors related to event filters (see
`/notification_service/subscribers/{id}/event_filters`).


+ Request (application/json)

    + Body
    
            {
                "url": "http://<subscriber_path>",
                "method": "PUT",
                "event_filters": [
                    {
                        "event_class": "face_statistic_parameter_change",
                        "attribute": ["main_person"]
                    }
                ]
            }

+ Response 200


### Delete subscriber with its subscriptions [DELETE]

#### Request body

No.

#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th>                                  <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>           <td class="code">409 Conflict</td></tr>
</table>


+ Response 200



## Subscriber's subscriptions [/notification_service/subscribers/{id}/event_filters]

This resource represents collection of subscriptions (expressed as event filters) of subscriber
with identifier `id`.

+ Parameters

    + id (required, number, `1`)
        
        Subscriber ID
        
        
### Get subscriber's subscriptions [GET]

#### Request body

No.

#### Response

##### Body

    [ <EventFilter>-list ]


+ Response 200 (application/json)

    + Body
    
            [
                {
                    "event_class": "face_attribute_change",
                    "attribute": ["gender", "age", "look"]
                },
                {
                    "event_class": "face_statistic_parameter_change",
                    "attribute": ["main_person"]
                }
            ]



### Update subscriber's subscriptions [PUT]

#### Request body

    [ <EventFilter>-list ]

#### Response

##### Body

No.

##### Errors

General errors:

<table>
    <th>Condition</th>                                  <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>           <td class="code">409 Conflict</td></tr>
    <tr><td>Unknown event class.</td>                   <td class="code">400 Bad Request</td></tr>
</table>

Errors specific to event class<span class="tmp-note"> (related to LOOK only)</span>:

<table>
    <th>Event class</th> <th>Condition</th> <th>Status</th>
    
    <tr>
        <td class="code">face_attribute_change |<br/>
                         body_attribute_change</td>
        <td>At least one attribute is unknown for object type specified by event class.</td>
        <td class="code">400 Bad Request</td>
    </tr>
    
    <tr>
        <td class="code">face_statistic_parameter_change</td>
        <td>At least one parameter is unknown for object type specified by event class.</td>
        <td class="code">400 Bad Request</td>
    </tr>
    
    <tr>
        <td class="code">face_scene_move |<br/>
                         body_scene_move</td>
        <td>Invalid interaction direction.</td>
        <td class="code">400 Bad Request</td>
    </tr>
</table>


+ Request (application/json)

    + Body
    
            [
                {
                    "event_class": "face_attribute_change",
                    "attribute": [ "gender", "age", "look" ]
                },
                {
                    "event_class": "face_statistic_parameter_change",
                    "attribute": [ "main_person" ]
                }
            ]
            
+ Response 200



### Delete subscriber's subscriptions [DELETE]

#### Request body

No.

#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th>                                  <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>           <td class="code">409 Conflict</td></tr>
</table>


+ Response 200










# Group Continuous attributes

For purposes of event notification, object attributes with continuous values (like age, distance)
need to be divided into subranges. When value goes from one subrange to another, this is notified.

Continuous attributes are:

<table>
    <th>Object type</th> <th>Attributes</th>
    
    <tr class="code"> <td>face</td>   <td>
                                            age<br/>
                                            distance<br/>
                                            age_confidence<br/>
                                            gender_confidence<br/>
                                            race_confidence<br/>
                                            emotion_confidence</td> </tr>
    <tr class="code"> <td>body</td>   <td>distance. This attribute does not have effect.</td> </tr>
</table>

Subranges of an attribute are represented by `Subranges` object:

    Subranges:
        {
            "<name1>": [<a1>, <b1>],
            "<name2>": [<a2>, <b2>],
            ...
        }

where

<table>
    <th>Field</th>                  <th>Type</th>   <th>Description</th>
    
    <tr> <td class="code">name</td> <td>String</td> <td>Subrange name.</td> </tr>
    <tr> <td class="code">a, b</td> <td>Real</td>   <td>Subrange endpoints.</td> </tr>
</table>

Every subrange is right-open: [a, b), i.e. a &le; x &lt; b. Subranges must not intersect
and have gaps. If attribute value becomes greater then any specified subrange, it is considered
to be in virtual subrange named `undefined`.

`Subranges` object can be empty.



## Continuous attributes of all object types and their subranges [/continuous_attributes]

### Get subranges of all continuous attributes of all object types [GET]

#### Request body

No.


#### Response

##### Body

    {
        "face": {
            "age": <Subranges>,
            "distance": <Subranges>,
            "age_confidence": <Subranges>,
            "gender_confidence": <Subranges>,
            "race_confidence": <Subranges>,
            "emotion_confidence": <Subranges>
        },
        "body": {
            "distance": <Subranges>
        }
    }


+ Response 200

    + Headers
    
            Content-Type: application/json
        
    + Body
    
            {
                "face": {
                    "age": {
                        "child": [0, 18],
                        "young adult": [18, 25],
                        "adult": [25, 35],
                        "middle aged": [35, 45],
                        "senior": [45, 110]
                    },
                    "distance": {
                        "close": [0, 1.5],
                        "middle": [1.5, 3],
                        "far": [3, 10]
                    }
                },
                "body": {
                    "distance": {
                        "close": [0, 1.5],
                        "middle": [1.5, 3],
                        "far": [3, 10]
                    }
                }
            }


### Update subranges of all continuous attribute of all object types [PUT]

#### Request body

    {
        "face": {
            "age": <Subranges>,
            "distance": <Subranges>,
            "age_confidence": <Subranges>,
            "gender_confidence": <Subranges>,
            "race_confidence": <Subranges>,
            "emotion_confidence": <Subranges>
        },
        "body": {
            "distance": <Subranges>
        }
    }

Any object type or attribute may absent; it is not updated.


#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th>                             <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>      <td class="code">409 Conflict</td></tr>
    <tr><td>Invalid request structure.</td>        <td class="code">400 Bad Request</td></tr>
    <tr><td>Unknown object type or attribute.</td> <td class="code">400 Bad Request</td></tr>
    <tr><td>Subranges intersect or have gaps.</td> <td class="code">400 Bad Request</td></tr>
</table>


+ Request

    + Headers
    
            Content-Type: application/json
        
    + Body
    
            {
                "face": {
                    "age": {
                        "child": [0, 18],
                        "young adult": [18, 25],
                        "adult": [25, 35],
                        "middle aged": [35, 45],
                        "senior": [45, 110]
                    },
                    "distance": {
                        "close": [0, 1.5],
                        "middle": [1.5, 3],
                        "far": [3, 10]
                    }
                },
                "body": {
                    "distance": {
                        "close": [0, 1.5],
                        "middle": [1.5, 3],
                        "far": [3, 10]
                    }
                }
            }

+ Response 200



## Continuous attributes of object type [/continuous_attributes/{object_type}]

+ Parameters

    + object_type (required, string, `face`)
    
        Object type, which has continuous attributes
        
        + Values
        
            + `face`
            
            + `body`

            
### Get subranges of all continuous attributes of object type [GET]

#### Request body

No.


#### Response

##### Body

    {
        "<attribute1>": <Subranges1>,
        ...
    }


+ Response 200

    + Headers
    
            Content-Type: application/json
        
    + Body
    
            {
                "age": {
                    "child": [0, 18],
                    "young adult": [18, 25],
                    "adult": [25, 35],
                    "middle aged": [35, 45],
                    "senior": [45, 110]
                },
                "distance": {
                    "close": [0, 1.5],
                    "middle": [1.5, 3],
                    "far": [3, 10]
                }
            }


### Update subranges of all continuous attributes of object type [PUT]

#### Request body

    {
        "<attribute1>": <Subranges1>,
        ...
    }

Any attribute may absent; it is not updated.


#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th>                             <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>      <td class="code">409 Conflict</td></tr>
    <tr><td>Invalid request structure.</td>        <td class="code">400 Bad Request</td></tr>
    <tr><td>Unknown attribute.</td>                <td class="code">400 Bad Request</td></tr>
    <tr><td>Subranges intersect or have gaps.</td> <td class="code">400 Bad Request</td></tr>
</table>


+ Request

    + Headers
    
            Content-Type: application/json
        
    + Body
    
            {
                "age": {
                    "child": [0, 18],
                    "adult": [18, 45],
                    "senior": [45, 110]
                },
                "distance": {
                    "close": [0, 3],
                    "far": [3, 10]
                }
            }

+ Response 200


## Continuous attribute [/continuous_attributes/{object_type}/{attribute}]

+ Parameters

    + object_type (required, string, `face`)
    
        Object type, which has continuous attributes
        
        + Values
        
            + `face`
            
            + `body`
            
    + attribute (required, string, `age`)
    
        Name of continuous attribute
        
        + Values
        
            + `age`
            
            + `distance`
            
            + `age_confidence`
            
            + `gender_confidence`
            
            + `race_confidence`
            
            + `emotion_confidence`



### Get subranges of continuous attribute [GET]

#### Request body

No.

#### Response

##### Body

    <Subranges>


+ Response 200

    + Headers
    
            Content-Type: application/json
        
    + Body
    
            {
                "child": [0, 18],
                "young adult": [18, 25],
                "adult": [25, 35],
                "middle aged": [35, 45],
                "senior": [45, 110]
            }


 
### Replace subranges of continuous attribute [PUT]

#### Request body

    <Subranges>


#### Response

##### Body

No.

##### Errors

<table>
    <th>Condition</th>                             <th>Status</th>
    
    <tr><td>Service is not in idle mode.</td>      <td class="code">409 Conflict</td></tr>
    <tr><td>Invalid request structure.</td>        <td class="code">400 Bad Request</td></tr>
    <tr><td>Subranges intersect or have gaps.</td> <td class="code">400 Bad Request</td></tr>
</table>


+ Request

    + Headers
    
            Content-Type: application/json
        
    + Body
    
            {
                "child": [0, 18],
                "young adult": [18, 25],
                "adult": [25, 35],
                "middle aged": [35, 45],
                "senior": [45, 110]
            }

+ Response 200










# Group ImageProcessor

This resource allows to get object attributes (age, gender, etc.) from static images. 
A header is required: "Content-Type: image/jpg" or "Content-Type: image/png".

    JSON data
    { "objects": [ object-list ] },
where

<table>
    <tr>
        <th bgcolor="#999999">Field</th>
        <th bgcolor="#999999">Type</th>
        <th bgcolor="#999999">Description</th>
    </tr>
    <td class="code">object</td>
        <td>Object</td>
        <td>
        <p> All social and static attributes except *distance*
    </td>
</table>

## POST /process_image

+ Request
    + Headers

            Content-Type: image/jpg


+ Response 200 (application/json)
    + Body

                {
                    "objects" : [
                        {
                            "age" : 10.0,
                            "emotion" : "perplexed",
                            "gender" : "male",
                            "look" : true,
                            "race" : "asian",
                            "screen_position_x" : 2027,
                            "screen_position_y" : 1329
                        }
                    ]
                }